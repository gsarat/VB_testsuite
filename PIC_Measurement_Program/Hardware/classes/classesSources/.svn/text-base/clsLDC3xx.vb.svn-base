'Superclass for Laser Diode Controllers 300, 302, 310, 340, 360, 395 from Profile (now Tektronix)
'Wrapper for device driver dll (ldc300_32.dll).

'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:2.0.50727.5448
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Runtime.InteropServices

    Public MustInherit Class clsLDC3xx
    Implements intfcHardwareDevice, intfcCurrentSource

    Private mGPIBSession As clsGPIBSession
    Private mGPIBAdressNr As intfcHardwareDevice.enumGPIBAddressNr
    Private mResetOnStartup As Boolean
    Private mAnswerMode As enumAnswerMode
    Private mTimeout As Integer
    Private mOperationMode As enumOperationMode
    Private mLaserDiodePolarity As enumDiodePolarity
    Private mPhotoDiodePolarity As enumDiodePolarity
    Private mPhotoDiodeBias As Boolean
    Private mPhotoDiodeCalibration As Double    'default 1A/W
    Private mLaserDiodeCurrent As Double    '0 A
    Private mPhotoDiodeCurrent As Double    '0 A
    Private mPower As Double '0.0 W
    Private mOversampling As Integer 'Default Value: 5

    Public Enum enumAnswerMode
        FullMode = 0
        ValueMode = 1
    End Enum

    Public Enum enumOperationMode
        constCurrent = 0
        constPowerInternalPhotodiode = 1
        constPowerExternalPhotodiode = 2
    End Enum

    Public Enum enumDiodePolarity
        CathodeGrounded = 0
        AnodeGrounded = 1
    End Enum

    Public Enum enumDiodeRange
        LOW = 0
        HIGH = 1
    End Enum

    Public WriteOnly Property Output() As Boolean Implements intfcCurrentSource.Output
        Set(ByVal value As Boolean)
            If mGPIBSession IsNot Nothing Then
                Try
                    mGPIBSession.SetLdOutput(value)
                Catch ex As Exception
                    Try
                        mGPIBSession.SetLdOutput(value)
                    Catch exx As Exception
                        MsgBox(Me.Name + ": " + exx.Message, vbCritical)
                    End Try
                End Try
            End If
        End Set
    End Property

    Public Sub SetSourceCurrent(ByVal dblValue As Double) Implements intfcCurrentSource.SetSourceCurrent
        LaserDiodeCurrent = dblValue
    End Sub

    Public Sub CloseSession() Implements intfcHardwareDevice.CloseSession
        If mGPIBSession IsNot Nothing Then
            mGPIBSession.Dispose()
            mGPIBSession = Nothing
        End If
    End Sub

    'Vor initialisierung
    <attrDeviceMapping("General", "GPIBAdressNr")> _
    Public Property GPIBAdressNr() As intfcHardwareDevice.enumGPIBAddressNr
        Get
            Return mGPIBAdressNr
        End Get
        Set(ByVal value As intfcHardwareDevice.enumGPIBAddressNr)
            mGPIBAdressNr = value
        End Set
    End Property

    <attrDeviceMapping("General", "ResetOnStartup")> _
    Public Property ResetOnStartup() As Boolean
        Get
            Return mResetOnStartup
        End Get
        Set(ByVal value As Boolean)
            mResetOnStartup = value
        End Set
    End Property

    <attrDeviceMapping("General", "AnswerMode")> _
    Public Property AnswerMode() As enumAnswerMode
        Get
            Return mAnswerMode
        End Get
        Set(ByVal value As enumAnswerMode)
            mAnswerMode = value
        End Set
    End Property

    <attrDeviceMapping("General", "Timeout")> _
    Public Property Timeout() As Integer
        Get
            Return mTimeout
        End Get
        Set(ByVal value As Integer)
            mTimeout = value
        End Set
    End Property

    '-----------------
    <attrDeviceMapping("General", "OperationMode")> _
    Public Property OperationMode() As enumOperationMode
        Get
            Return mOperationMode
        End Get
        Set(ByVal value As enumOperationMode)
            mOperationMode = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetMode(mOperationMode)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "LaserDiodePolarity")> _
    Public Property LaserDiodePolarity() As enumDiodePolarity
        Get
            Return mLaserDiodePolarity
        End Get
        Set(ByVal value As enumDiodePolarity)
            mLaserDiodePolarity = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetLdPol(mLaserDiodePolarity)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "PhotoDiodePolarity")> _
    Public Property PhotoDiodePolarity() As enumDiodePolarity
        Get
            Return mPhotoDiodePolarity
        End Get
        Set(ByVal value As enumDiodePolarity)
            mPhotoDiodePolarity = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetPdPol(mPhotoDiodePolarity)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "PhotoDiodeBias")> _
    Public Property PhotoDiodeBias() As Boolean
        Get
            Return mPhotoDiodeBias
        End Get
        Set(ByVal value As Boolean)
            mPhotoDiodeBias = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetBias(mPhotoDiodeBias)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "PhotoDiodeCalibration")> _
    Public Property PhotoDiodeCalibration() As Double
        Get
            Return mPhotoDiodeCalibration
        End Get
        Set(ByVal value As Double)
            mPhotoDiodeCalibration = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetCalibration(mPhotoDiodeCalibration)
            End If
        End Set
    End Property

    '<attrDeviceMapping("Source", "LaserDiodeCurrent")> _
    Public Property LaserDiodeCurrent() As Double
        Get
            Return mLaserDiodeCurrent
        End Get
        Set(ByVal value As Double)
            mLaserDiodeCurrent = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetLdCurrent(mLaserDiodeCurrent)
            End If
        End Set
    End Property

    '<attrDeviceMapping("Source", "PhotoDiodeCurrent")> _
    'Currently not in use
    Public Property PhotoDiodeCurrent() As Double
        Get
            Return mPhotoDiodeCurrent
        End Get
        Set(ByVal value As Double)
            mPhotoDiodeCurrent = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetPdCurrent(mPhotoDiodeCurrent)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "Power")> _
    Public Property Power() As Double
        Get
            Return mPower
        End Get
        Set(ByVal value As Double)
            mPower = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetPower(mPower)
            End If
        End Set
    End Property

    <attrDeviceMapping("Source", "Oversampling")> _
    Public Property Oversampling() As Integer
        Get
            Return mOversampling
        End Get
        Set(ByVal value As Integer)
            mOversampling = value
            If mGPIBSession IsNot Nothing Then
                mGPIBSession.SetOvrSample(mOversampling)
            End If
        End Set
    End Property

    Public Sub Init() Implements intfcHardwareDevice.Init
        GPIBAdressNr = mGPIBAdressNr
        ResetOnStartup = mResetOnStartup
        AnswerMode = mAnswerMode
        Timeout = mTimeout
        OperationMode = mOperationMode
        LaserDiodePolarity = mLaserDiodePolarity
        'PhotoDiodePolarity = mPhotoDiodePolarity
        'PhotoDiodeBias = mPhotoDiodeBias
        'PhotoDiodeCalibration = mPhotoDiodeCalibration
        LaserDiodeCurrent = mLaserDiodeCurrent
        'PhotoDiodeCurrent = mPhotoDiodeCurrent
        'Power = mPower
        Oversampling = mOversampling
    End Sub

    Public Function IsAvailable() As Boolean Implements intfcHardwareDevice.IsAvailable
        If mGPIBSession IsNot Nothing Then
            Try
                mGPIBSession.GetAnswerMode(True)
            Catch ex As Exception
                Return False
            End Try
            Return True
        End If
    End Function

    Public MustOverride ReadOnly Property Name() As String Implements intfcHardwareDevice.Name

    Public Function OpenSession() As Boolean Implements intfcHardwareDevice.OpenSession
        Try
            If mGPIBSession Is Nothing Then
                mGPIBSession = New clsGPIBSession("GPIB0::" & Trim(Str(mGPIBAdressNr)), False, mResetOnStartup, mAnswerMode, mTimeout)
            End If
            Threading.Thread.Sleep(50)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public MustOverride Sub SetToDefaultSettings() Implements intfcHardwareDevice.SetToDefaultSettings

    Private Class clsGPIBSession
        Inherits Object
        Implements IDisposable

        Private _handle As System.Runtime.InteropServices.HandleRef

        Private _disposed As Boolean = True

        '''<summary>
        '''This function creates an IVI instrument driver session, typically using the C session instrument handle.
        '''</summary>
        '''<param name="Instrument_Handle">
        '''The instrument handle that is used to create an IVI instrument driver session.
        '''</param>
        Public Sub New(ByVal Instrument_Handle As System.IntPtr)
            MyBase.New()
            Me._handle = New System.Runtime.InteropServices.HandleRef(Me, Instrument_Handle)
            Me._disposed = False
        End Sub

        '''<summary>
        '''This function performs the following initialization actions:
        '''
        '''- Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.
        '''
        '''- Performs an identification query on the Instrument.
        '''
        '''- Resets the instrument to a known state.
        '''
        '''- Sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        '''
        '''- Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.
        '''
        '''- Each time this function is invoked a Unique Session is opened.  It is possible to have more than one session open for the same resource.
        '''
        '''</summary>
        '''<param name="Resource_Name">
        '''This control specifies the interface and address of the device that is to be initialized (Instrument Descriptor). The exact grammar to be used in this control is shown in the note below. 
        '''
        '''Default Value:  "GPIB::10"
        '''
        '''Notes:
        '''
        '''(1) Based on the Instrument Descriptor, this operation establishes a communication session with a device.  The grammar for the Instrument Descriptor is shown below.  Optional parameters are shown in square brackets ([]).
        '''
        '''Interface   Grammar
        '''------------------------------------------------------
        '''GPIB        GPIB[board]::primary address[::secondary address]
        '''            [::INSTR]
        '''            
        '''The GPIB keyword is used with GPIB instruments.
        '''
        '''The default value for optional parameters are shown below.
        '''
        '''Optional Parameter          Default Value
        '''-----------------------------------------
        '''board                       0
        '''secondary address           none - 31
        '''
        '''</param>
        '''<param name="ID_Query">
        '''This control specifies if an ID Query is sent to the instrument during the initialization procedure.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Skip Query
        '''VI_ON  (1) - Do Query (Default Value)
        '''
        '''Note:
        '''   
        '''Under normal circumstances the ID Query ensures that the instrument initialized is the type supported by this driver. However circumstances may arise where it is undesirable to send an ID Query to the instrument.  In those cases; set this control to "Skip Query" and this function will initialize the selected interface, without doing an ID Query.
        '''
        '''</param>
        '''<param name="Reset_Device">
        '''This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Don't Reset
        '''VI_ON  (1) - Reset Device (Default Value)
        '''
        '''Note:
        '''
        '''If you do not want the instrument reset. Set this control to "Don't Reset" while initializing the instrument.
        '''
        '''</param>
        '''<param name="Answer_Mode">
        '''This control specifies if the instrument answers in Full Mode or in Value Mode.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Full Mode (Default Value)
        '''VI_ON  (1) - Value Mode
        '''
        '''Note:
        '''
        '''Use Value Mode if you want to increase speed.
        '''</param>
        '''<param name="Timeout_Value">
        '''This control specifies the minimum timeout value to use (in milliseconds) when accessing the device.
        '''
        '''Defaullt Value: 5000
        '''
        '''</param>
        Public Sub New(ByVal Resource_Name As String, ByVal ID_Query As Boolean, ByVal Reset_Device As Boolean, ByVal Answer_Mode As Boolean, ByVal Timeout_Value As Integer)
            MyBase.New()
            Dim instrumentHandle As System.IntPtr
            Dim pInvokeResult As Integer = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), System.Convert.ToUInt16(Answer_Mode), Timeout_Value, instrumentHandle)
            Me._handle = New System.Runtime.InteropServices.HandleRef(Me, instrumentHandle)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Me._disposed = False
        End Sub

        '''<summary>
        '''Gets the instrument handle.
        '''</summary>
        '''<value>
        '''The value is the IntPtr that represents the handle to the instrument.
        '''</value>
        Public ReadOnly Property Handle() As System.IntPtr
            Get
                Return Me._handle.Handle
            End Get
        End Property

        '''<summary>
        '''This function sets the operation mode of the device.
        '''</summary>
        '''<param name="Mode">
        '''This control specifies the operation mode of the instrument.
        '''
        '''Valid Range:
        '''0 - const. Current (Default Value)
        '''1 - const. Power (internal Photodiode)
        '''2 - const. Power (external Photodiode)
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetMode(ByVal Mode As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetMode(Me._handle, Mode)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the operation mode of the device.
        '''</summary>
        '''<param name="Mode">
        '''This control returns the operation mode of the device.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetMode(ByRef Mode As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetMode(Me._handle, Mode)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the polarity of the laserdiode.
        '''</summary>
        '''<param name="Polarity">
        '''This control specifies the polarity of the laserdiode.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Cathode grounded (Default Value)
        '''VI_ON  (1) - Anode grounded 
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetLdPol(ByVal Polarity As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetLdPol(Me._handle, Polarity)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the polarity of the laserdiode.
        '''</summary>
        '''<param name="Polarity">
        '''This control returns the polarity of the laserdiode.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetLdPol(ByRef Polarity As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetLdPol(Me._handle, Polarity)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the polarity of the photodiode.
        '''
        '''</summary>
        '''<param name="Polarity">
        '''This control specifies the polarity of the photodiode.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Cathode grounded (Default Value)
        '''VI_ON  (1) - Anode grounded 
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetPdPol(ByVal Polarity As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetPdPol(Me._handle, Polarity)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the polarity of the photodiode.
        '''</summary>
        '''<param name="Polarity">
        '''This control returns the polarity of the photodiode.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPdPol(ByRef Polarity As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPdPol(Me._handle, Polarity)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function switches the photodiode Bias voltage on or off.
        '''
        '''</summary>
        '''<param name="Bias">
        '''This control specifies the state of the photodiode Bias voltage.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Bias off (Default Value)
        '''VI_ON  (1) - Bias on
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetBias(ByVal Bias As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetBias(Me._handle, Bias)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the state of the photodiode Bias voltage.
        '''</summary>
        '''<param name="Bias">
        '''This control returns the state of the photodiode Bias voltage.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetBias(ByRef Bias As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetBias(Me._handle, Bias)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the range of the photodiode.
        '''</summary>
        '''<param name="Range">
        '''This control specifies the range of the photodiode.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Range LOW (Default Value)
        '''VI_ON  (1) - Range HIGH 
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetPdRange(ByVal Range As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetPdRange(Me._handle, Range)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the range of the photodiode.
        '''</summary>
        '''<param name="Range">
        '''This control returns the range of the photodiode.
        '''
        '''Return Values:
        '''VI_OFF (0) - Range LOW
        '''VI_ON  (1) - Range HIGH
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPdRange(ByRef Range As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPdRange(Me._handle, Range)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function switches the laserdiode output on or off.
        '''
        '''Note:
        '''
        '''To switch the output on while the &lt;LD OPEN&gt; error is present you have to do the following. 
        '''
        '''(1) Reset the error by calling the function &lt;Ldc300_SetLdOutput(Instrument_Handle, VI_ON)&gt;. 
        '''Thereafter an error message will occour. 
        '''
        '''(2) When calling the function &lt;Ldc300_SetLdOutput(Instrument_Handle, VI_ON)&gt; 
        '''a second time the output will switch on.
        '''</summary>
        '''<param name="Output">
        '''This control specifies the state of the laserdiode output.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Output Off (Default Value)
        '''VI_ON  (1) - Output On
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetLdOutput(ByVal Output As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetLdOutput(Me._handle, Output)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the state of the laserdiode output.
        '''
        '''</summary>
        '''<param name="Output">
        '''This control returns the state of the laserdiode output.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetLdOutput(ByRef Output As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetLdOutput(Me._handle, Output)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Device Error Condition Register.
        '''</summary>
        '''<param name="Device_Error_Condition_Register">
        '''This control returns the Device Error Condition Register in decimal notation.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetDEC(ByRef Device_Error_Condition_Register As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetDEC(Me._handle, Device_Error_Condition_Register)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Device Error Event Register.
        '''</summary>
        '''<param name="Device_Error_Event_Register">
        '''This control returns the Device Error Event Register in decimal notation.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetDEE(ByRef Device_Error_Event_Register As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetDEE(Me._handle, Device_Error_Event_Register)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the Device Error Event Enable Register.
        '''</summary>
        '''<param name="Dev_Error_Event_Enable_Reg_">
        '''This control specifies the Device Error Event Enable Register.
        '''
        '''Default Value: 0
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetEDE(ByVal Dev_Error_Event_Enable_Reg_ As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetEDE(Me._handle, Dev_Error_Event_Enable_Reg_)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Device Error Event Enable Register.
        '''</summary>
        '''<param name="Dev_Error_Event_Enable_Register">
        '''This control returns the Device Error Event Enable Register in decimal notation.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetEDE(ByRef Dev_Error_Event_Enable_Register As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetEDE(Me._handle, Dev_Error_Event_Enable_Register)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the calibration factor of the photodiode.
        '''</summary>
        '''<param name="Calibration_Factor">
        '''This control specifies the calibration factor of the photodiode [A/W].
        '''
        '''Default Value: 1.0 A/W
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetCalibration(ByVal Calibration_Factor As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetCalibration(Me._handle, Calibration_Factor)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the calibration factor of the photodiode.
        '''</summary>
        '''<param name="Value">
        '''This control selects the return value.
        '''
        '''Valid Range:
        '''0 - minimum Value
        '''1 - maximum Value
        '''2 - set Value (Default Value)
        '''
        '''</param>
        '''<param name="Calibration_factor">
        '''This control returns the calibration factor of the photodiode [A/W].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetCalibration(ByVal Value As Short, ByRef Calibration_factor As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetCalibration(Me._handle, Value, Calibration_factor)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the laserdiode current.
        '''</summary>
        '''<param name="Current">
        '''This control specifies the laserdiode current [A].
        '''
        '''Default Value: 0.0 A
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetLdCurrent(ByVal Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetLdCurrent(Me._handle, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the laserdiode current.
        '''</summary>
        '''<param name="Value">
        '''This control selects the return value.
        '''
        '''Valid Range:
        '''0 - minimum Value
        '''1 - maximum Value
        '''2 - set Value (Default Value)
        '''3 - actual Value
        '''
        '''</param>
        '''<param name="Current">
        '''This control returns the laserdiode current [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetLdCurrent(ByVal Value As Short, ByRef Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetLdCurrent(Me._handle, Value, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the photodiode current.
        '''</summary>
        '''<param name="Current">
        '''This control specifies the photodiode current [A].
        '''
        '''Default Value: 0.0 A
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetPdCurrent(ByVal Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetPdCurrent(Me._handle, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the photodiode current. 
        '''
        '''Note:
        '''
        '''Depending on the operation mode the internal or the external photodiode is used. 
        '''</summary>
        '''<param name="Value">
        '''This control selects the return value.
        '''
        '''Valid Range:
        '''0 - minimum Value
        '''1 - maximum Value
        '''2 - set Value (Default Value)
        '''3 - actual Value
        '''
        '''</param>
        '''<param name="Current">
        '''This control returns the photodiode current [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPdCurrent(ByVal Value As Short, ByRef Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPdCurrent(Me._handle, Value, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the optical power (calibration via &lt;Set Calibration Factor&gt;).
        '''.
        '''</summary>
        '''<param name="Optical_Power">
        '''This control specifies the optical power [W].
        '''
        '''Default Value: 0.0 W
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetPower(ByVal Optical_Power As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetPower(Me._handle, Optical_Power)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the optical power (calibration via &lt;Set Calibration Factor&gt;).
        '''</summary>
        '''<param name="Value">
        '''This control selects the return value.
        '''
        '''Valid Range:
        '''0 - minimum Value
        '''1 - maximum Value
        '''2 - set Value (Default Value)
        '''3 - actual Value
        '''
        '''</param>
        '''<param name="Optical_Power">
        '''This control returns the optical power (calibration via &lt;Set Calibration Factor&gt;) [W].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPower(ByVal Value As Short, ByRef Optical_Power As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPower(Me._handle, Value, Optical_Power)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the optical power (calibration via front poti).
        '''</summary>
        '''<param name="Optical_Power">
        '''This control returns the optical power (calibration via front poti) [W].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPowerPoti(ByRef Optical_Power As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPowerPoti(Me._handle, Optical_Power)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the laserdiode limit current adjusted via the front poti.
        '''</summary>
        '''<param name="Limit_Current">
        '''This control returns the laserdiode limit current [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetLdLimit(ByRef Limit_Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetLdLimit(Me._handle, Limit_Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the photodiode limit current adjusted via the front poti.
        '''</summary>
        '''<param name="Limit_Current">
        '''This control returns the photodiode limit current [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetPdLimit(ByRef Limit_Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetPdLimit(Me._handle, Limit_Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the current of the internal photodiode. 
        '''
        '''</summary>
        '''<param name="Current">
        '''This control returns the current of the internal photodiode [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetIntPdCurrent(ByRef Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetIntPdCurrent(Me._handle, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the current of the external photodiode. 
        '''
        '''</summary>
        '''<param name="Current">
        '''This control returns the current of the external photodiode [A].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetExtPdCurrent(ByRef Current As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetExtPdCurrent(Me._handle, Current)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the laserdiode voltage.
        '''</summary>
        '''<param name="Voltage">
        '''This control returns the laserdiode voltage [V].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetLdVoltage(ByRef Voltage As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetLdVoltage(Me._handle, Voltage)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the photodiode Bias voltage.
        '''</summary>
        '''<param name="Voltage">
        '''This control returns the photodiode Bias voltage [V].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetBiasVoltage(ByRef Voltage As Double) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetBiasVoltage(Me._handle, Voltage)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the Oversampling Rate of the Analog-Digital-Converter.
        '''</summary>
        '''<param name="Oversampling_Rate">
        '''This control specifies the Oversampling Rate.
        '''
        '''Valid Range: 0..7
        '''
        '''Default Value: 5
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetOvrSample(ByVal Oversampling_Rate As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetOvrSample(Me._handle, Oversampling_Rate)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Oversampling Rate of the Analog-Digital-Converter.
        '''</summary>
        '''<param name="Oversampling_Rate">
        '''This control returns the Oversampling Rate.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetOvrSample(ByRef Oversampling_Rate As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetOvrSample(Me._handle, Oversampling_Rate)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the mode of the Error LED.
        '''</summary>
        '''<param name="Error_LED_Mode">
        '''This control specifies the mode of the Error LED.
        '''
        '''Valid Range:
        '''VI_OFF (0) - LED is allways Off (Default Value)
        '''VI_ON  (1) - LED indicates Errors
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetErrLED(ByVal Error_LED_Mode As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetErrLED(Me._handle, Error_LED_Mode)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the mode of the Error LED.
        '''</summary>
        '''<param name="Error_LED_Mode">
        '''This control returns the mode of the Error LED.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetErrLED(ByRef Error_LED_Mode As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.GetErrLED(Me._handle, Error_LED_Mode)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function writes commands and queries to the instrument to modify parameters and query device settings.
        '''</summary>
        '''<param name="Write_Buffer">
        '''The user can use this control to send common commands and queries to the instrument. This control can also be used to write any valid command to the instrument.
        '''
        '''Default Value:  "*RST"
        '''
        '''Note:
        '''
        '''The command or query to be sent to the instrument may be a literal enclosed in double quotes i.e. "*RST" or may be contained in a variable of type string.
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function writeInstrData(ByVal Write_Buffer As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.writeInstrData(Me._handle, Write_Buffer)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function reads data from the instrument's output buffer and returns it to the specified variable in memory.
        '''
        '''Notes:
        '''
        '''(1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        '''
        '''(2) If valid data is not available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled this function will hang indefinitely and it may be necessary to reboot the computer to break out.
        '''</summary>
        '''<param name="Number_Bytes_To_Read">
        '''The number of bytes specified by this control should be greater than or equal to the number of bytes which are to be read from the instrument. If the actual number of bytes to be read is greater than the number this control specifies then multiple reads will be required to empty the instrument's output buffer.
        '''
        '''If the instrument's output buffer is not emptied the instrument may return invalid data when future reads are performed.
        '''
        '''Default Value:  50 (See NOTE 2)
        '''
        '''Notes:
        '''
        '''(1) If NO DATA is available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled, this function will hang indefinitely and it may be necessary to reboot the computer.
        '''
        '''(2) If the number of bytes expected is greater than 50 the value of this control may be increased. If the actual number of bytes read is larger than the declared size of the read buffer a run-time error will be generated.
        '''
        '''</param>
        '''<param name="Read_Buffer">
        '''The incoming data from the instrument is placed into this variable.
        '''
        '''Notes:
        '''
        '''(1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        '''
        '''(2) This function does not overwrite any old data left in the string variable from the last time the function was called. String data in LabWindows/CVI is terminated with an ASCII null(0x0) and string manipulation functions will only recognize data before the ASCII null.
        '''
        '''(3) The declared size of the string variable must be greater than the actual number of bytes read from the instrument if it is not a run-time error will be generated.
        '''
        '''</param>
        '''<param name="NumBytes_Read">
        '''This variable contains the actual number of bytes read from the instrument. This is the value which is returned by the read function.
        '''
        '''Note:
        '''
        '''If the actual number of bytes read is less than the number of bytes specified in the Number Bytes To Read control then the output buffer has probably been emptied. If the read function fails and the number of bytes read is 0, the most probable cause for the failure is there was no data available at the instrument's output buffer.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function readInstrData(ByVal Number_Bytes_To_Read As Integer, ByVal Read_Buffer As System.Text.StringBuilder, ByRef NumBytes_Read As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.readInstrData(Me._handle, Number_Bytes_To_Read, Read_Buffer, NumBytes_Read)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function resets the instrument to a known state and sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        '''
        '''</summary>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function reset() As Integer
            Dim pInvokeResult As Integer = PInvoke.reset(Me._handle)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function runs the instrument's self test routine and returns the test result.
        '''
        '''</summary>
        '''<param name="Self_Test_Result">
        '''This control contains the value returned from the instrument self test.  Zero means success.  For any other code, see the device's operator's manual.
        '''
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function selfTest(ByRef Self_Test_Result As Short) As Integer
            Dim pInvokeResult As Integer = PInvoke.selfTest(Me._handle, Self_Test_Result)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function reads an error code from the instrument's error queue.
        '''
        '''</summary>
        '''<param name="Error_Code">
        '''This control returns the error code read from the instrument's error queue.
        '''
        '''</param>
        '''<param name="Error_Message">
        '''This control returns the error message string read from the instrument's error message queue.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function errorQuery(ByRef Error_Code As Integer, ByVal Error_Message As System.Text.StringBuilder) As Integer
            Dim pInvokeResult As Integer = PInvoke.errorQuery(Me._handle, Error_Code, Error_Message)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Instruments Identification Strings. 
        '''
        '''</summary>
        '''<param name="Manufacturer_Name">
        '''This control returns the Manufacturer Name.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<param name="Instrument_Name">
        '''This control returns the Instrument Name.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<param name="Instrument_Serial_Number">
        '''This control returns the Instrument Serial Number.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<param name="Firmware_Revision">
        '''This control returns the Instrument Firmware Revision.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function identificationQuery(ByVal Manufacturer_Name As System.Text.StringBuilder, ByVal Instrument_Name As System.Text.StringBuilder, ByVal Instrument_Serial_Number As System.Text.StringBuilder, ByVal Firmware_Revision As System.Text.StringBuilder) As Integer
            Dim pInvokeResult As Integer = PInvoke.identificationQuery(Me._handle, Manufacturer_Name, Instrument_Name, Instrument_Serial_Number, Firmware_Revision)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the revision numbers of the instrument driver and instrument firmware, and tells the user with which  instrument firmware this revision of the driver is compatible. 
        '''
        '''</summary>
        '''<param name="Instrument_Driver_Revision">
        '''This control returns the Instrument Driver Software Revision.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<param name="Firmware_Revision">
        '''This control returns the Instrument Firmware Revision.
        '''
        '''Note:
        '''
        '''The array must contain at least 256 elements ViChar[256].
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function revisionQuery(ByVal Instrument_Driver_Revision As System.Text.StringBuilder, ByVal Firmware_Revision As System.Text.StringBuilder) As Integer
            Dim pInvokeResult As Integer = PInvoke.revisionQuery(Me._handle, Instrument_Driver_Revision, Firmware_Revision)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function sets the Answer Mode of the instrument.
        '''</summary>
        '''<param name="Answer_Mode">
        '''This control specifies if the instrument answers in Full Mode or in Value Mode.
        '''
        '''Valid Range:
        '''VI_OFF (0) - Full Mode (Default Value)
        '''VI_ON  (1) - Value Mode
        '''
        '''Note:
        '''
        '''Use Value Mode if you want to increase speed.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function SetAnswerMode(ByVal Answer_Mode As Boolean) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetAnswerMode(Me._handle, System.Convert.ToUInt16(Answer_Mode))
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        '''<summary>
        '''This function returns the Answer Mode of the instrument and synchronizes the instrument driver with the instrument settings.
        '''</summary>
        '''<param name="Answer_Mode">
        '''This control returns the Answer Mode of the instrument.
        '''</param>
        '''<returns>
        '''This control contains the status code returned by the function call.
        '''
        '''For Status Codes see function &lt;Error Message&gt;.
        '''
        '''</returns>
        Public Function GetAnswerMode(ByRef Answer_Mode As Boolean) As Integer
            Dim Answer_ModeAsUShort As UShort
            Dim pInvokeResult As Integer = PInvoke.GetAnswerMode(Me._handle, Answer_ModeAsUShort)
            Answer_Mode = System.Convert.ToBoolean(Answer_ModeAsUShort)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        Public Overloads Sub Dispose() Implements System.IDisposable.Dispose
            Me.Dispose(True)
            System.GC.SuppressFinalize(Me)
        End Sub

        Private Overloads Sub Dispose(ByVal disposing As Boolean)
            If (Me._disposed = False) Then
                PInvoke.close(Me._handle)
                Me._handle = New System.Runtime.InteropServices.HandleRef(Nothing, System.IntPtr.Zero)
            End If
            Me._disposed = True
        End Sub

        Protected Overrides Sub Finalize()
            Me.Dispose(False)
        End Sub

        Private Class PInvoke

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_init", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function init(ByVal Resource_Name As String, ByVal ID_Query As UShort, ByVal Reset_Device As UShort, ByVal Answer_Mode As UShort, ByVal Timeout_Value As Integer, ByRef Instrument_Handle As System.IntPtr) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetMode(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Mode As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetMode(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Mode As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetLdPol", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetLdPol(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Polarity As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetLdPol", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetLdPol(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Polarity As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetPdPol", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetPdPol(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Polarity As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPdPol", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPdPol(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Polarity As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetBias", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetBias(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Bias As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetBias", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetBias(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Bias As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetPdRange", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetPdRange(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Range As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPdRange", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPdRange(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Range As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetLdOutput", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetLdOutput(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Output As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetLdOutput", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetLdOutput(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Output As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetDEC", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetDEC(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Device_Error_Condition_Register As Integer) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetDEE", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetDEE(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Device_Error_Event_Register As Integer) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetEDE", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetEDE(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Dev_Error_Event_Enable_Reg_ As Integer) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetEDE", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetEDE(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Dev_Error_Event_Enable_Register As Integer) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetCalibration", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetCalibration(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Calibration_Factor As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetCalibration", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetCalibration(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Value As Short, ByRef Calibration_factor As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetLdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetLdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetLdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetLdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Value As Short, ByRef Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetPdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetPdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Value As Short, ByRef Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetPower", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetPower(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Optical_Power As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPower", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPower(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Value As Short, ByRef Optical_Power As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPowerPoti", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPowerPoti(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Optical_Power As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetLdLimit", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetLdLimit(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Limit_Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetPdLimit", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetPdLimit(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Limit_Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetIntPdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetIntPdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetExtPdCurrent", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetExtPdCurrent(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Current As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetLdVoltage", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetLdVoltage(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Voltage As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetBiasVoltage", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetBiasVoltage(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Voltage As Double) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetOvrSample", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetOvrSample(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Oversampling_Rate As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetOvrSample", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetOvrSample(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Oversampling_Rate As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetErrLED", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetErrLED(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Error_LED_Mode As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetErrLED", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetErrLED(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Error_LED_Mode As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_writeInstrData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function writeInstrData(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Write_Buffer As String) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_readInstrData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function readInstrData(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Number_Bytes_To_Read As Integer, ByVal Read_Buffer As System.Text.StringBuilder, ByRef NumBytes_Read As Integer) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_reset", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function reset(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_selfTest", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function selfTest(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Self_Test_Result As Short) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_errorQuery", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function errorQuery(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Error_Code As Integer, ByVal Error_Message As System.Text.StringBuilder) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_identificationQuery", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function identificationQuery(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Manufacturer_Name As System.Text.StringBuilder, ByVal Instrument_Name As System.Text.StringBuilder, ByVal Instrument_Serial_Number As System.Text.StringBuilder, ByVal Firmware_Revision As System.Text.StringBuilder) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_revisionQuery", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function revisionQuery(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Instrument_Driver_Revision As System.Text.StringBuilder, ByVal Firmware_Revision As System.Text.StringBuilder) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_SetAnswerMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAnswerMode(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Answer_Mode As UShort) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_GetAnswerMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAnswerMode(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Answer_Mode As UShort) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_close", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function close(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport("Resources/ldc300_32", EntryPoint:="Ldc300_errorMessage", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function errorMessage(ByVal Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByVal Status_Code As Integer, ByVal Message As System.Text.StringBuilder) As Integer
            End Function


            Public Shared Function TestForError(ByVal handle As System.Runtime.InteropServices.HandleRef, ByVal status As Integer) As Integer
                If (status < 0) Then
                    PInvoke.ThrowError(handle, status)
                End If
                Return status
            End Function

            Public Shared Function ThrowError(ByVal handle As System.Runtime.InteropServices.HandleRef, ByVal code As Integer) As Integer
                Dim msg As System.Text.StringBuilder = New System.Text.StringBuilder(256)
                PInvoke.errorMessage(handle, code, msg)
                Throw New System.Runtime.InteropServices.ExternalException(msg.ToString, code)
            End Function
        End Class
    End Class
End Class
